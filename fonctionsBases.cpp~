#include <iostream>

using namespace std;

const int  taille = 8;
const bool blanc  = false;
const bool noir   = true;


enum typePiece{
	       pion,
	       fou,
	       cavalier,
	       tour,
	       reine,
	       roi,
	       rien
};

struct Piece{
  typePiece	type;
  bool		couleur;
};

struct Liste{
  int    x,y;
  Piece  piece;
  Liste* suiv;
};

void emptyChaine(Liste* tete)
{
  if(tete->suiv)
    emptyChaine(tete->suiv);
  delete tete->suiv;
  tete->suiv = NULL;
}

void emptyTableau(Piece plateau[taille][taille])
{
  for(int i=0; i<taille; ++i){
    for(int j=0; j<taille; ++j){
      plateau[i][j] = Piece{rien, 0};
    }
  }
}

Piece get_squareChaine(Liste* tete, int x, int y)
{
  if(tete->x == x && tete->y == y)
    return tete->piece;
  if(tete->suiv)
    return get_squareChaine(tete->suiv, x, y);
  return Piece{rien, 0};
}

Piece get_squareTab(Piece plateau[taille][taille], int x, int y)
{
  return plateau[x][y];
}

Liste* startChaine()
{
  Liste* ret = NULL;
  Liste* ptr = NULL;
  // initialiser les pions
  for(int i=0; i<taille;++i){
    if(!ptr){
      ptr = new Liste;
      ret = ptr;
    }
    else {
      ptr->suiv = new Liste;
      ptr = ptr->suiv;
    }
    ptr->x = i;
    ptr->y = 1;
    ptr->piece = Piece{pion, blanc};
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 6;
    ptr->piece = Piece{pion, noir};
  }
  // initialiser les tours
  for(int i = 0; i<=7; i+=7){
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 0;
    ptr->piece = Piece{tour, blanc};
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 7;
    ptr->piece = Piece{tour, noir};
  }
  // initialiser les cavaliers
  for(int i = 1; i<=6; i+=5){
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 0;
    ptr->piece = Piece{cavalier, blanc};
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 7;
    ptr->piece = Piece{cavalier, noir};
  }
  // initialiser les fous
  for(int i = 2; i<=5; i+=3){
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 0;
    ptr->piece = Piece{fou, blanc};
    ptr->suiv = new Liste;
    ptr = ptr->suiv;
    ptr->x = i;
    ptr->y = 7;
    ptr->piece = Piece{fou, noir};
  }
  // initialiser les reines
  ptr->suiv = new Liste;
  ptr = ptr->suiv;
  ptr->x = 3;
  ptr->y = 0;
  ptr->piece = Piece{reine, blanc};
  ptr->suiv = new Liste;
  ptr = ptr->suiv;
  ptr->x = 3;
  ptr->y = 7;
  ptr->piece = Piece{reine, noir};
  // initialiser les rois
  ptr->suiv = new Liste;
  ptr = ptr->suiv;
  ptr->x = 4;
  ptr->y = 0;
  ptr->piece = Piece{roi, blanc};
  ptr->suiv = new Liste;
  ptr = ptr->suiv;
  ptr->x = 4;
  ptr->y = 7;
  ptr->piece = Piece{roi, noir};
  ptr->suiv = NULL;
  return ret;
}

void startTab(Piece plateau[taille][taille])
{
  for(int i = 0; i<taille; ++i){
    for(int j = 0; j<taille; ++j){
      plateau[i][j] = {rien,0};
    }
  }
  for(int i = 0; i<taille; ++i){
    plateau[1][i] = Piece{pion, blanc};
    plateau[6][i] = Piece{pion, noir};
  }
  for(int i = 0; i<=7; i+=7){
    plateau[0][i] = Piece{tour, blanc};
    plateau[7][i] = Piece{tour, noir};
  }
  for(int i = 1; i<=6; i+=5){
    plateau[0][i] = Piece{cavalier, blanc};
    plateau[7][i] = Piece{cavalier, noir};
  }
  for(int i = 2; i<=5; i+=3){
    plateau[0][i] = Piece{fou, blanc};
    plateau[7][i] = Piece{fou, noir};
  }
  plateau[0][3] = Piece{reine, blanc};
  plateau[7][3] = Piece{reine, noir};
  plateau[0][4] = Piece{roi,   blanc};
  plateau[7][4] = Piece{roi,   noir};
}

void printChaine(Liste* tete)
{
  Liste* ptr = tete;
  while(ptr){
    cout << '('
	 << ptr->x << ','
	 << ptr->y << ','
	 << ptr->piece.type << ','
         << ptr->piece.couleur << ')';
    if(ptr->suiv) cout << "->";
    else          cout << endl;
    ptr = ptr->suiv;
  }
}

void printTab(Piece plateau[taille][taille])
{
  for(int i = taille-1; i>=0; --i){
    for(int j = 0; j<taille; ++j){
      cout << '(' << plateau[i][j].type << ',' << plateau[i][j].couleur << ')';
    }
    cout << endl;
  }
}

int main(void){
  cout << rien << endl;
  Piece plateau[taille][taille] = {};
  startTab(plateau);
  printTab(plateau);
  Liste* tete = startChaine();
  printChaine(tete);
  return 0;
};
